Use package format
  api.versionsFrom('1.0.3.2');

State dependencies, one of which must be 'widget' for client and server, and one must be 'templating' on the client
  api.use(['widget', 'mongo']);
  api.use(['templating'], 'client');

Use 'mongo' on both if you want to store stuff

npm packages can be used with npm.depends and used with npm.require

Have a single export named whatever available to both client and server. The export name because the short code of your widget
  api.export('IMon');

export an object with the following properties:
  displayName: how you want to widget title to appear
  description: a description of what your widget does
  referenceUrl: a URL that users can visit to learn more about your data
  allPublications: an array of all publications your
  requiredPublications: a function that, when given your widget's data, returns an array of publication names to which the widget must subscribe. Can receive an undefined data object, in which case return the array of publications to which a newly created widget must subscribe. Your publications will get the data attribute of a widget when called, but the pubs you return when requiredPublications gets no data will also get no data. Publications receive widget data as an argument when widgets subscribe.
  constructor: the function to be called when a new widget instance is to be created (when the user adds the widget)

MyWidget class should be a subclass of "Widget" class. You can overwrite default width and height. Allowed values are 1, 2, and 3 for each and signify the numbers of columns or rows to span. Like this:
MyWidget = function(doc) {
  Widget.call(this, doc);

  _.extend(this, {
    width: 2,
    height: 1
  });

  this.data = {};
  /* My code */
}
MyWidget.prototype = Object.create(Widget.prototype);
MyWidget.prototype.constructor = MyWidget;

In the widget object, keep a data object as a property. This data object will be used as the context of your templates. Your widget will also inherit a "setData(object)" method, which should be used to change the data on an existing widget.

To create templates, use the following naming convention:
For the widget: {short code}Widget, e.g. "MyWidget"
For the about/info popup: {short code}Info
For the settings popup: {short code}Settings

For css, all your widgets will receive a class with the same name as your widget package.

That's it.
